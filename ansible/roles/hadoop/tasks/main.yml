---
- name: download {{ url }}
  run_once: true
  get_url:
    url: "{{ url }}"
    dest: "{{ download }}/{{ file }}"

- name: extract {{ download }}/{{ file }}
  become: yes
  become_method: sudo
  unarchive:
    src: "{{ download }}/{{ file }}"
    dest: "{{ usr_local }}"
    copy: no
    creates: "{{ hadoop_home }}"

- name: set ownership on {{ hadoop_home }}
  become: yes
  become_method: sudo
  file:
    path: "{{ hadoop_home }}"
    owner: vagrant
    group: vagrant
    recurse: yes
    mode: 0755

- name: link {{ hadoop_home }} to {{ usr_local }}/hadoop
  become: yes
  become_method: sudo
  file:
    src: "{{ hadoop_home }}"
    dest: "{{ usr_local }}/hadoop"
    owner: vagrant
    group: vagrant
    state: link

- name: set PATH=$PATH:{{ hadoop_home }}/bin
  become: yes
  become_method: sudo
  lineinfile:
    dest: "{{ etc_profiles }}/hadoop.sh"
    create: yes
    state: present
    regexp: '^PATH'
    line: 'PATH=$PATH:{{ hadoop_home }}/bin:{{ hadoop_home }}/sbin'

- name: set HADOOP_PREFIX={{ hadoop_home }}
  become: yes
  become_method: sudo
  lineinfile:
    dest: "{{ etc_profiles }}/hadoop.sh"
    create: yes
    state: present
    regexp: '^HADOOP_PREFIX'
    line: 'HADOOP_PREFIX={{ hadoop_home }}'

- name: set HADOOP_CONF_DIR={{ hadoop_conf }}
  become: yes
  become_method: sudo
  lineinfile:
    dest: "{{ etc_profiles }}/hadoop.sh"
    create: yes
    state: present
    regexp: '^export HADOOP_CONF_DIR'
    line: 'export HADOOP_CONF_DIR={{ hadoop_conf }}'

- name: copy core-site.xml {{ hadoop_conf }}/core-site.xml
  template:
    src: templates/core-site.xml.j2
    dest: "{{ hadoop_conf }}/core-site.xml"
  register: core_config

- name: copy yarn-site.xml {{ hadoop_conf }}/core-site.xml
  template:
    src: templates/yarn-site.xml.j2
    dest: "{{ hadoop_conf }}/yarn-site.xml"
  register: yarn_config

- name: copy capacity-scheduler.xml {{ hadoop_conf }}/capacity-scheduler.xml
  template:
    src: templates/capacity-scheduler.xml.j2
    dest: "{{ hadoop_conf }}/capacity-scheduler.xml"
  register: capacity_config

- name: copy hadoop-env.sh {{ hadoop_conf }}/hadoop-env.sh
  template:
    src: templates/hadoop-env.sh.j2
    dest: "{{ hadoop_conf }}/hadoop-env.sh"
  register: hadoop_env

- name: copy yarn-env.sh {{ hadoop_conf }}/yarn-env.sh
  template:
    src: templates/yarn-env.sh.j2
    dest: "{{ hadoop_conf }}/yarn-env.sh"
  register: yarn_env

- name: create {{ hadoop_log_dir }}
  file:
    path: "{{ hadoop_log_dir }}"
    state: directory

- name: install hdfs-namenode systemd unit file
  become: yes
  become_method: sudo
  when: inventory_hostname in groups['hadoop-master']
  template:
    src: templates/hdfs-namenode.service.j2
    dest: "{{ system_units }}/hdfs-namenode.service"
  register: hdfs_namenode_service

- name: install hdfs-secondarynamenode systemd unit file
  become: yes
  become_method: sudo
  when: inventory_hostname in groups['hadoop-master']
  template:
    src: templates/hdfs-secondarynamenode.service.j2
    dest: "{{ system_units }}/hdfs-secondarynamenode.service"
  register: hdfs_secondarynamenode_service

- name: install hdfs-datanode systemd unit file
  become: yes
  become_method: sudo
  template:
    src: templates/hdfs-datanode.service.j2
    dest: "{{ system_units }}/hdfs-datanode.service"
  register: hdfs_datanode_service

- name: install yarn-resourcemanager systemd unit file
  become: yes
  become_method: sudo
  when: inventory_hostname in groups['hadoop-master']
  template:
    src: templates/yarn-resourcemanager.service.j2
    dest: "{{ system_units }}/yarn-resourcemanager.service"

- name: install yarn-nodemanager systemd unit file
  become: yes
  become_method: sudo
  template:
    src: templates/yarn-nodemanager.service.j2
    dest: "{{ system_units }}/yarn-nodemanager.service"

- name: format HDFS
  when: inventory_hostname in groups['hadoop-master']
  command: "{{ hadoop_home}}/bin/hdfs namenode -format"
  environment:
    JAVA_HOME: "{{ java_home }}"
  args:
    creates: /tmp/hadoop-{{ ansible_user }}/dfs/name

- name: restart hdfs-namenode
  become: yes
  become_method: sudo
  when: inventory_hostname in groups['hadoop-master'] and (hadoop_env.changed or core_config.changed or hdfs_namenode_service.changed)
  systemd:
    enabled: yes
    state: restarted
    name: hdfs-namenode
    daemon_reload: yes

- name: restart hdfs-datanode
  become: yes
  become_method: sudo
  when: hadoop_env.changed or core_config.changed or hdfs_datanode_service.changed
  systemd:
    enabled: yes
    state: restarted
    name: hdfs-datanode
    daemon_reload: yes

- name: restart hdfs-secondarynamenode
  become: yes
  become_method: sudo
  when: inventory_hostname in groups['hadoop-master'] and (hadoop_env.changed or core_config.changed or hdfs_secondarynamenode_service.changed)
  systemd:
    enabled: yes
    state: restarted
    name: hdfs-secondarynamenode
    daemon_reload: yes
  register: hadoop_namenode_restart

- name: restart yarn-resourcemanager
  become: yes
  become_method: sudo
  when: inventory_hostname in groups['hadoop-master'] and (yarn_env.changed or yarn_config.changed or capacity_config.changed)
  systemd:
    enabled: yes
    state: restarted
    name: yarn-resourcemanager
    daemon_reload: yes

- name: restart yarn-nodemanager
  become: yes
  become_method: sudo
  when: yarn_env.changed or yarn_config.changed or capacity_config.changed
  systemd:
    enabled: yes
    state: restarted
    name: yarn-nodemanager
    daemon_reload: yes
